
# coding: utf-8

# ##Homework 2 by Yicheng Liu

# In[10]:

import numpy as np
import sys


# First, I will generate data. I assume that the two states are 0 and 1. The observations are 0, 1 and 2.

# In[12]:

def paragen():
    p1,p2,p3=np.random.random(3)
    P=[[p1,1-p1],[p2,1-p2]]
    pi=[p3,1-p3]
    Q=np.random.random((2,3))
    Q[0]/=np.sum(Q[0])
    Q[1]/=np.sum(Q[1])
    return P,Q,pi


# Now, according to the probabilities generated by the function above. We are ready to generate the data.
# As there are only two states, each data we generate only has a length of 2 numbers, each denoting an observation.
# Each time we call the following function, we generate one instance.

# In[2]:

def datagen(P,Q,pi):
    state=[]
    obser=[]
    state+=[np.random.choice(2,p=pi)]
    obser+=[np.random.choice(3,p=Q[state[0]])]
    for i in range(1):
        state+=[np.random.choice(2,p=P[state[i]])]
        obser+=[np.random.choice(3,p=Q[state[i+1]])]
    return state,obser


# Then, we are going to write the EM algorithm. Given all the observations. We just try again and again to 

# Now, we can define our main function. According to the input parameter, 'g' for generate data to data.txt; 't' for train model and test.

# In[17]:

if __name__=='__main__':
    flag=1
    if sys.argv[1]=='g' or flag==1:
        f1,f2=file('train.txt','w'),file('test.txt','w')
        P,Q,pi=paragen()
        for i in range(100):
            f1.write(str(datagen(P,Q,pi))+'\n')
        for i in range(10):
            f2.write(str(datagen(P,Q,pi))+'\n')
        f1.close()
        f2.close()
        exit(0)
    if sys.argv[1]=='t':
        f1,f2=file('train.txt','r'),file('test.txt','r')
        obsers=[]
        for i in f1:
            exec 'temp,obser='+i
            obsers+=[obser]
        P,Q,pi=EM(obsers)
        good=0
        for i in f2:
            exec 'state,obser='+i
            tosort=[]
            for i in range(2):
                for j in range(2):
                    tosort+=[(i,j,pi[i]*P[i][j]*Q[i][obser[0]]*Q[j][obser[1]])]
            temp=sorted(tosort,key=lambda x:-x[2])[0][:2]
            print temp
            if temp==state:
                good+=1
        print 'correct: %d/10'%good
        exit(0)
    P,Q,pi=paragen()
    train,test=[datagen(P,Q,pi) for i in range(100)],[datagen(P,Q,pi) for i in range(100)]
    
                
P,Q,pi=paragen()
print datagen(P,Q,pi)


# In[ ]:



